[project]
name = "experimaestro"
authors = [
    {name = "Benjamin Piwowarski", email = "benjamin@piwowarski.fr"}
]
description = '"Experimaestro is a computer science experiment manager"'
readme = "README.md"
license = "GPL-3"
keywords = ["experiment manager"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
repository = "https://github.com/experimaestro/experimaestro-python"
documentation = "https://experimaestro-python.readthedocs.io/"
dynamic = ["version"]
requires-python = ">=3.10"
dependencies = [
    "arpeggio >=2,<3",
    "attrs >=23.1.0,<24",
    "click >=8",
    "decorator >=5,<6",
    "docstring-parser >=0.15,<1",
    "fasteners >=0.19,<1",
    "flask >=2.3,<3",
    "flask-socketio >=5.3,<6",
    "gevent >=25",
    "gevent-websocket >=0.10",
    "humanfriendly >=10",
    "huggingface-hub >0.17",
    "marshmallow >=3.20,<4",
    "mkdocs >=1.5,<2",
    "omegaconf >=2.3,<3",
    "psutil >=7,<8",
    "pyparsing >=3.1,<4",
    "pytools >=2023.1.1,<2024",
    "pyyaml >=6.0.1,<7",
    "requests >=2.31,<3",
    "rpyc >=5,<7",
    "sortedcontainers >=2.4,<3",
    "termcolor >=2.3,<3",
    "tqdm >=4.66.1,<5",
    "typing-extensions >=4.2; python_version < \"3.12\"",
    "watchdog >=2"
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
dirty = true
format-jinja = """{%- set pre = [] -%}{%- set metadata = [] -%}
{%- if revision is not none -%}{{ pre.append(stage|string + revision|string) or "" }}{%- endif -%}
{%- if distance > 0 -%}{{ metadata.append(distance|string) or "" }}{%- endif -%}
{{ serialize_semver(base, pre, metadata)}}"""

[tool.poetry]
include = [
    "src/experimaestro/server/data/*",
    "src/experimaestro/sphinx/static/experimaestro.css",
    "src/experimaestro/mkdocs/style.css",
    { path="src/experimaestro/server/data/*", format=['sdist', 'wheel']}
]
version = "0.0.0"

[tool.poetry-dynamic-versioning.files."src/experimaestro/version.py"]
persistent-substitution = true
initial-content = """
  # These version placeholders will be replaced later during substitution.
  __version__ = "0.0.0"
  __version_tuple__ = (0, 0, 0)
"""

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-timeout>=2.4.0",
]

[tool.poetry.group.ssh]
optional = true

[tool.poetry.group.ssh.dependencies]
paramiko = "^3.3"
fabric = "^3"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
docutils = "^0.18"
Pygments = "^2.15"

[project.scripts]
experimaestro = "experimaestro.__main__:main"

[project.entry-points."mkdocs.plugins"]
experimaestro = "experimaestro.mkdocs:Documentation"

[project.entry-points."experimaestro.process"]
local = "experimaestro.connectors.local:LocalProcess"
slurm = "experimaestro.launchers.slurm:BatchSlurmProcess"

[project.entry-points."experimaestro.connectors"]
local = "experimaestro.connectors.local:LocalConnector"
ssh = "experimaestro.connectors.ssh:SshConnector"

[project.entry-points."experimaestro.tokens"]
unix = "experimaestro.tokens:CounterToken"


[tool.distutils.bdist_wheel]
universal = true

[tool.distutils.sdist]
formats = "zip"

[tool.pydocstyle]
match-dir = '(?!tests)(?!resources)(?!docs)[^\.].*'
match = '(?!test)(?!setup)[^\._].*\.py'
inherit = "false"
ignore = "D200, D203, D213, D406, D407   # Google conventions"

[tool.flake8]
doctests = "True"
exclude = ".git, .eggs, __pycache__, tests/, docs/, build/, dist/, app/"
max-line-length = "88"
# See https://github.com/PyCQA/pycodestyle/issues/373
extend-ignore = "E203"

[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0a1"
changelog_start_rev = "v1.0.0"
tag_format = "v$major.$minor.$patch$prerelease"
# update_changelog_on_bump = true
